import telebot,os
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from collections import deque
import logging

logging.basicConfig(level=logging.INFO)

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "TOKEN"
bot = telebot.TeleBot(TOKEN)

# –û—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
search_queue = deque()
# –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä {user_id: partner_id}
active_chats = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: "idle", "searching", "chatting"
user_states = {}

def log_state():
    logging.info(f"–û—á–µ—Ä–µ–¥—å: {list(search_queue)}")
    logging.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {active_chats}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(buttons):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for button in buttons:
        keyboard.add(KeyboardButton(button))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_state(user_id, state):
    user_states[user_id] = state
    if state == "idle":
        bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
                         reply_markup=create_keyboard(["/search"]))
    elif state == "searching":
        bot.send_message(user_id, "–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–∏—Å–∫ - /unsearch.",
                         reply_markup=create_keyboard(["üé≤","/unsearch"]))
    elif state == "chatting":
        bot.send_message(user_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –û–±—â–∞–π—Ç–µ—Å—å!\n\n/stop, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥\n/new, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫",
                         reply_markup=create_keyboard(["/stop", "/new"]))
    elif state == "admin":
        bot.send_message(user_id,
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É - /—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ /–¥–∏–∞–ª–æ–≥–∏ /–≤—ã—Ö–æ–¥",
                         reply_markup=create_keyboard(["/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "/–¥–∏–∞–ª–æ–≥–∏", "/–≤—ã—Ö–æ–¥"]))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª–∞ –≤ —Ñ–∞–π–ª
def save_gender(user_id, gender):
    os.makedirs("gender", exist_ok=True)
    with open(f"gender/{user_id}.txt", "w") as file:
        file.write(gender)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
@bot.message_handler(commands=['start'])
def start_handler(message):
    global user_states
    user_id = message.chat.id
    if user_states.get(user_id) in ["searching", "chatting"]:
        search_queue.remove(user_id)
        update_state(user_id, "idle")
    bot.send_message(user_id,
                     "üòâ –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è '1 –Ω–∞ 1', –Ω–∞—à –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –¥–æ–≤–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ —É—Ä–æ–≤–Ω—è –ª—É—á—à–∏—Ö –±–æ—Ç–æ–≤.\n\n–ß–µ–º –º—ã –ª—É—á—à–µ?\n–ú—ã –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥–µ–ª–∞—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞—Ç–Ω—ã–º–∏:\n‚úÖ –í—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –º–µ–¥–∏–∞ (—Å—Ç–∏–∫–µ—Ä—ã, –≤–∏–¥–µ–æ –∏ —Ç.–¥.)")
    gender_markup = types.InlineKeyboardMarkup()
    gender_markup.add(types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="–ú—É–∂—Å–∫–æ–π"))
    gender_markup.add(types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="–ñ–µ–Ω—Å–∫–∏–π"))
    bot.send_message(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@bot.message_handler(func=lambda msg: msg.text == "/–∞–¥–º–∏–Ω01")
def admin(message):
    user_id = message.chat.id
    if user_id == admin_id:
        update_state(user_id, "admin")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–∑–∞–ø—Ä–æ—Å–∞
@bot.message_handler(func=lambda msg: msg.text == "/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def admin(message):
    user_id = message.chat.id
    if user_id == admin_id:
        bot.send_message(user_id, f"–ó–∞ –∑–∞–ø—É—Å–∫:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count_messages}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤: {count_dialogs}")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–∑–∞–ø—Ä–æ—Å–∞
@bot.message_handler(func=lambda msg: msg.text == "/–¥–∏–∞–ª–æ–≥–∏")
def admin(message):
    user_id = message.chat.id
    if user_id == admin_id:
        bot.send_message(user_id, f"–û—á–µ—Ä–µ–¥—å: {list(search_queue)}\n–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {active_chats}")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∞
@bot.message_handler(func=lambda msg: msg.text == "/–≤—ã—Ö–æ–¥")
def admin_exit(message):
    user_id = message.chat.id
    if user_id == admin_id:
        bot.send_message(user_id, "–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
        update_state(user_id, "idle")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫"
@bot.message_handler(func=lambda msg: msg.text == "/search")
def search_handler(message):
    global count_dialogs
    user_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if user_states.get(user_id) in ["searching", "chatting"]:
        bot.send_message(user_id, "–í—ã —É–∂–µ –∏—â–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –æ–±—â–∞–µ—Ç–µ—Å—å.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    search_queue.append(user_id)
    update_state(user_id, "searching")

    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –ø–æ–∏—Å–∫")
    log_state()

    # –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–æ–∑–¥–∞—ë–º –ø–∞—Ä—É
    if len(search_queue) > 1:

        user1 = search_queue.popleft()
        user2 = search_queue.popleft()

        active_chats[user1] = user2
        active_chats[user2] = user1

        update_state(user1, "chatting")
        update_state(user2, "chatting")

        count_dialogs+=1
        print("—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è 2 —á–µ–ª–æ–≤–µ–∫")
        log_state()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫"
@bot.message_handler(func=lambda msg: msg.text == "/unsearch")
def stop_search_handler(message):
    user_id = message.chat.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø–æ–∏—Å–∫–µ
    if user_states.get(user_id) != "searching":
        bot.send_message(user_id, "–í—ã –Ω–µ –∏—â–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ù–∞–∂–º–∏—Ç–µ /search", parse_mode="Markdown")
        update_state(user_id, "idle")
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    try:
        search_queue.remove(user_id)
        bot.send_message(user_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–∏—Å–∫–∞.")
        update_state(user_id, "idle")
        print("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –ø–æ–∏—Å–∫–∞")
        log_state()
    except:
        print("–æ—à–∏–±–∫–∞ –Ω–∞ 139")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
@bot.message_handler(
    func=lambda msg: msg.chat.id in active_chats,
    content_types=[
        'text', 'photo', 'video', 'audio', 'document', 'sticker', 'voice', 'video_note', 'animation'
    ]
)
def chat_handler(message):
    global count_messages
    user_id = message.chat.id
    partner_id = active_chats.get(user_id)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if message.text == "/stop":
        stop_chat_handler(message)
        return
    elif message.text == "/new":
        new_chat_handler(message)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä—É
    if partner_id:
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            if message.content_type == 'text':
                bot.send_message(partner_id, message.text)
            elif message.content_type == 'photo':
                bot.send_photo(partner_id, message.photo[-1].file_id, caption=message.caption)
            elif message.content_type == 'video':
                bot.send_video(partner_id, message.video.file_id, caption=message.caption)
            elif message.content_type == 'audio':
                bot.send_audio(partner_id, message.audio.file_id, caption=message.caption)
            elif message.content_type == 'document':
                bot.send_document(partner_id, message.document.file_id, caption=message.caption)
            elif message.content_type == 'sticker':
                bot.send_sticker(partner_id, message.sticker.file_id)
            elif message.content_type == 'voice':
                bot.send_voice(partner_id, message.voice.file_id, caption=message.caption)
            elif message.content_type == 'video_note':
                bot.send_video_note(partner_id, message.video_note.file_id)
            elif message.content_type == 'animation':
                bot.send_animation(partner_id, message.animation.file_id, caption=message.caption)
            else:
                bot.send_message(user_id, "–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        except Exception as e:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.content_type}: {e}")

        count_messages+=1
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.content_type} –æ—Ç {user_id} –∫ {partner_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–æ–ø"
@bot.message_handler(func=lambda msg: msg.text == "/stop")
def stop_chat_handler(message):
    user_id = message.chat.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
    if user_id not in active_chats:
        bot.send_message(user_id, "–í—ã –Ω–µ –æ–±—â–∞–µ—Ç–µ—Å—å —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.")
        update_state(user_id, "idle")
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    partner_id = active_chats.pop(user_id, None)
    if partner_id:
        try:
            active_chats.pop(partner_id, None)

            markup=types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report"))
            bot.send_message(user_id, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥.", reply_markup=markup)
            bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.", reply_markup=markup)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            update_state(user_id, "idle")
            update_state(partner_id, "idle")

            print("–¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
            log_state()
        except:
            print("–æ—à–∏–±–∫–∞ –Ω–∞ 225")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π"
@bot.message_handler(func=lambda msg: msg.text == "/new")
def new_chat_handler(message):
    global count_dialogs
    user_id = message.chat.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
    if user_id not in active_chats:
        bot.send_message(user_id, "–í—ã –Ω–µ –æ–±—â–∞–µ—Ç–µ—Å—å —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.")
        update_state(user_id, "idle")
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
    partner_id = active_chats.pop(user_id, None)
    if partner_id:
        active_chats.pop(partner_id, None)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report"))
        bot.send_message(user_id, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥.", reply_markup=markup)
        bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.", reply_markup=markup)
        update_state(partner_id, "idle")

        print("–¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
        log_state()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    search_queue.append(user_id)
    update_state(user_id, "searching")

    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –ø–æ–∏—Å–∫")
    log_state()

    # –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —Å–æ–∑–¥–∞—ë–º –ø–∞—Ä—É
    if len(search_queue) > 1:
        user1 = search_queue.popleft()
        user2 = search_queue.popleft()

        active_chats[user1] = user2
        active_chats[user2] = user1

        update_state(user1, "chatting")
        update_state(user2, "chatting")

        count_dialogs+=1
        print("—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è 2 —á–µ–ª–æ–≤–µ–∫")
        log_state()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
@bot.message_handler(func=lambda msg: msg.chat.id not in active_chats and user_states.get(msg.chat.id) != "searching")
def not_in_dialog_handler(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ. –ù–∞–∂–º–∏—Ç–µ /search —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.", parse_mode="Markdown")

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞ –∏ –∂–∞–ª–æ–±
@bot.callback_query_handler(func=lambda callback:True)
def callback_message(callback):
    global report_user
    if callback.data=="report":
        try:
            bot.send_message(callback.message.chat.id, "‚ö†Ô∏è–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–≥–æ, –Ω–∞ —á—Ç–æ –≤—ã –∂–∞–ª—É–µ—Ç–µ—Å—å –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø–æ–∏—Å–∫—É –∏ –≤–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞‚ö†Ô∏è")
            report_user=callback.message.chat.id # id –ø–æ–¥—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–∫—Ä–∏–Ω
            bot.delete_message(callback.message.chat.id, callback.message.message_id)
        except:
            print("–æ—à–∏–±–∫–∞ –Ω–∞ 292")
    elif callback.data == "–ú—É–∂—Å–∫–æ–π" or "–ñ–µ–Ω—Å–∫–∏–π":
        gender = "male" if callback.data == "–ú—É–∂—Å–∫–æ–π" else "female"
        user_id = callback.message.chat.id
        save_gender(user_id, gender)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        bot.send_message(user_id, f"–í–∞—à –ø–æ–ª ({callback.data}) —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        update_state(user_id, "idle")

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —é–∑–µ—Ä–∞ —Å –∂–∞–ª–æ–±–æ–π
@bot.message_handler(
    func=lambda msg: msg.chat.id not in active_chats, content_types=['photo'])
def img_report(message):
    global report_user
    if message.chat.id == report_user:
        bot.send_photo(admin_id, message.photo[-1].file_id, caption=message.caption)
        bot.send_message(admin_id, f"–∂–∞–ª–æ–±–∞ –æ—Ç: {message.chat.id}")
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ")
        report_user=0

report_user=0 #id —é–∑–µ—Ä–∞, –ø–æ–¥–∞–≤—à–µ–≥–æ –∂–∞–ª–æ–±—É
admin_id=None #id —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
count_messages=0 #—á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –∑–∞–ø—É—Å–∫
count_dialogs=0 #—á–∏—Å–ª–æ –¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞ –∑–∞–ø—É—Å–∫
print("-------------------–±–æ—Ç –∑–∞–ø—É—â–µ–Ω---------------------")
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
